name: âŒ› Build Project 

permissions:
  contents: write

on:
    push:
      tags:
      - 'v*'

jobs:
  buildForAllSupportedPlatforms:
    name: ðŸ”¨ Build Kinect Unity for ${{ matrix.targetPlatform }} âœ¨
    runs-on: ubuntu-latest
    strategy:
      matrix:
        targetPlatform:
          - StandaloneWindows
          - StandaloneWindows64
          - StandaloneOSX
          - StandaloneLinux64
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
        
      # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-
      - if: matrix.targetPlatform == 'Android'
        uses: jlumbroso/free-disk-space@v1.2.0
      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: "Dragon Ball Card Tactics" 
          versioning: Tag

      - name: Zip the build
        run: |
            cd build/${{ matrix.targetPlatform }} && zip -r ../../Kinect-Unity-${{ matrix.targetPlatform }}.zip .

      - name: Upload the zipped build
        uses: actions/upload-artifact@v4
        with:
          name: Kinect-Unity-Zipped-${{ matrix.targetPlatform }}
          path: Kinect-Unity-${{ matrix.targetPlatform }}.zip

  release:
    name: ðŸš€ Create GitHub Release
    needs: buildForAllSupportedPlatforms
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Get previous tag
        id: prev_tag
        run: |
          PREV_TAG=$(git tag --sort=-creatordate | grep -E '^v[0-9]+' | sed -n '2p' || true)
          echo "Previous tag: $PREV_TAG"
          echo "prev_tag=$PREV_TAG" >> $GITHUB_ENV

      - name: Generate changelog from commits
        id: generate_changelog
        run: |
          if [ -z "${{ env.prev_tag }}" ]; then
            LOG=$(git log --pretty=format:"- %s")
          else
            LOG=$(git log --pretty=format:"- %s" ${{ env.prev_tag }}..HEAD)
          fi
          echo "Changelog generated:"
          echo "$LOG"
          echo "Changelog<<EOF" >> $GITHUB_ENV
          echo "$LOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Download build artifacts
        uses: actions/download-artifact@v4
